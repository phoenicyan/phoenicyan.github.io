<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://phoenicyan.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://phoenicyan.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-22T00:13:42+00:00</updated><id>https://phoenicyan.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Vibe-Coding a SQL Transpiler</title><link href="https://phoenicyan.github.io/blog/2025/sql_transpiler/" rel="alternate" type="text/html" title="Vibe-Coding a SQL Transpiler"/><published>2025-09-14T11:39:00+00:00</published><updated>2025-09-14T11:39:00+00:00</updated><id>https://phoenicyan.github.io/blog/2025/sql_transpiler</id><content type="html" xml:base="https://phoenicyan.github.io/blog/2025/sql_transpiler/"><![CDATA[<div style="font-style: italic;text-align: right;"> "The heavens declare the glory of God; and the firmament sheweth his handywork." PS 19:1 </div> <h2 id="introduction">Introduction</h2> <p>At some time during this year, I heard the term “vibe coding”<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. So, I wanted to try it myself in a small project to see how it works. Also I wanted to demonstrate some of my ideas for a SQL transplilation (conversion between Postgres and T-SQL dialects). I chose an AI from one of the most reputable vendors (imho): gemini.google.com. However, I could achieve similar results with a different AI vendor as well. I limited the goals of my project to:</p> <ol> <li>Implement a parser that understands a couple of SQL dialects (Postgres and T-SQL).</li> <li>Implement a builder that converts AST into an internal representation of a SQL statement.</li> <li>Implement the output statement generator in the desired dialect.</li> </ol> <p>For example, the Transpiler should be able to convert a T-SQL statement such as</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">TOP</span> <span class="mi">10</span> <span class="k">max</span><span class="p">([</span><span class="n">dbo</span><span class="p">].[</span><span class="n">col1</span><span class="p">])</span> <span class="k">FROM</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">tbl</span><span class="p">]</span> 
</code></pre></div></div> <p>into an equivalent Postgres statement</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">max</span><span class="p">(</span><span class="nv">"dbo"</span><span class="p">.</span><span class="nv">"col1"</span><span class="p">)</span> <span class="k">FROM</span> <span class="nv">"dbo"</span><span class="p">.</span><span class="nv">"tbl"</span> <span class="k">LIMIT</span> <span class="mi">10</span>
</code></pre></div></div> <p>As an additional benefit of this exercise, I wanted to learn about a modern parsing system. After learning about lex/yacc at college many years ago, I only had some experience with the Gold parser back in the beginning of the 2000s. I also knew that using LR(k) parsers, such as Antlr4, was out of the question for a simple reason - it has unpredictable parsing time and numerous other problems, including “reduce-reduce” conflicts that are very hard to resolve. I used the powerful LMGTFY to find a modern parsing tool called PEG, along with its C++ variant, cpp-peglib, on GitHub.</p> <h2 id="part-1-implementing-parser-and-visitor">Part 1. Implementing parser and visitor</h2> <p>After watching a couple of free online courses about the absolute best practices for “vibe coding”, I decided to split requests to AI to make tiny steps such as</p> <ol> <li>Write PEG grammar to parse arbitrary text consisting of identifiers, literals, numbers separated by punctuation symbols that I found on the keyboard (<code class="language-plaintext highlighter-rouge">~!@#$%^&amp;*=+;:&lt;&gt;\\/,.?|-</code>), grouped by parenthesis and with optional single line comments (starting with <code class="language-plaintext highlighter-rouge">--</code>) and multiple lines comments (contained in <code class="language-plaintext highlighter-rouge">/* */</code>).</li> <li>Modify the PEG grammar to logically group the identifiers, literals, and numbers into statements where a statement starts with a keyword (<code class="language-plaintext highlighter-rouge">ALTER, CREATE, DELETE, DROP, INSERT, SELECT, SET, SHOW, TRUNCATE, UPDATE, START, COMMIT, ROLLBACK</code>) and ends with a semicolon. If a statement does not start with a keyword, then it should be recognized as an unknown statement.</li> <li>Implement an initial primitive AST visitor that prints the statement(s). The idea is to tweak the visitor later to print AST into a different dialect of SQL than the input dialect.</li> <li>Modify AST visitor to print SQL in a specific dialect.</li> </ol> <h3 id="postgres-peg-parser">Postgres PEG parser</h3> <p>Gemini brought in a valuable prototype that I tested in <a href="https://yhirose.github.io/cpp-peglib/">Yhirose’s PEGlib Playground</a>. Its straightforward design encouraged me to ask Gemini to refrain from any additional comments or explanations, allowing me to explore its functionality independently.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Start &lt;- Content EOI

Content &lt;- (Spacing? Expression )* Spacing?

Expression &lt;- Parenthesized / StringLiteral / Number / IdentifierOrKeyword / Punctuation

Parenthesized &lt;- '(' Content ')'

Spacing &lt;- (Whitespace / Comment)+

Comment &lt;- SingleLineComment / MultiLineComment

SingleLineComment &lt;- SLCprefix (!EOL .)*
~SLCprefix &lt;- '--'

MultiLineComment  &lt;- MLCprefix (!MLCsuffix .)* MLCsuffix
~MLCprefix &lt;- '/*'
~MLCsuffix &lt;- '*/'

Whitespace &lt;- [ \t\n\r\[\]]+

Identifier      &lt;- &lt; [a-zA-Z_] [a-zA-Z0-9_]* &gt;
QtIdentifier      &lt;- '"' [^"]* '"'

IdentifierOrKeyword &lt;- QtIdentifier / Identifier

Number          &lt;- &lt;[+-]? [0-9]+ ('.' [0-9]+)?&gt;

StringLiteral   &lt;- "'" ( "''" / !"'" . )* "'"

Punctuation     &lt;- [~!@#$%^&amp;*=+;:&lt;&gt;\\/,.?|-]

EOL &lt;- '\n' / '\r\n' / '\r'
EOI &lt;- !.
</code></pre></div></div> <blockquote> <p><strong><em>NOTE:</em></strong> Here I learned that ~ at the start of a rule marks it as a “silent rule”, i.e., a rule that is not included in the AST.</p> </blockquote> <p>Sample text and AST:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-- sample comment
SELECT max("col1") FROM "tbl" LIMIT 10;SELECT 1;

+ Start
    + Content
    + Spacing
        + Comment/0[SingleLineComment]
        - Whitespace (
)
    - Expression/3[Identifier] (SELECT)
    - Spacing/0[Whitespace] ( )
    - Expression/3[Identifier] (max)
    - Expression/0[QtIdentifier] ("col1")
    - Spacing/0[Whitespace] ( )
    - Expression/3[Identifier] (FROM)
    - Spacing/0[Whitespace] ( )
    - Expression/3[QtIdentifier] ("tbl")
    - Spacing/0[Whitespace] ( )
    - Expression/3[Identifier] (LIMIT)
    - Spacing/0[Whitespace] ( )
    - Expression/2[Number] (10)
    - Expression/4[Punctuation] (;)
    - Expression/3[Identifier] (SELECT)
    - Spacing/0[Whitespace] ( )
    - Expression/2[Number] (1)
    - Expression/4[Punctuation] (;)
    - EOI ()
</code></pre></div></div> <p>Then I slightly modified the grammar to treat <code class="language-plaintext highlighter-rouge">;</code> as a special symbol that separates statements, and introduced the Keyword rule that can tell me which statement type is used:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Statements &lt;- EOS* (Statement EOS)* Statement? EOI

Statement &lt;- (Spacing? Expression )* Spacing?

Expression &lt;- Parenthesized / StringLiteral / Number / IdentifierOrKeyword / Punctuation

Parenthesized &lt;- '(' EOS* (Statement EOS)* Statement? ')'

~Spacing &lt;- (Whitespace / Comment)+

Comment &lt;- SingleLineComment / MultiLineComment

SingleLineComment &lt;- SLCprefix (!EOL .)*
~SLCprefix &lt;- '--'

MultiLineComment  &lt;- MLCprefix (!MLCsuffix .)* MLCsuffix / MLC2 (!MLC2 .)* MLC2
~MLCprefix &lt;- '/*'
~MLCsuffix &lt;- '*/'
~MLC2 &lt;- '$$'

Whitespace &lt;- [ \t\n\r\[\]]+

Identifier      &lt;- !Keyword &lt; [a-zA-Z_] [a-zA-Z0-9_]* &gt;
QtIdentifier      &lt;- '"' [^"]* '"'
Keyword &lt;- 'ALTER'i / 'CREATE'i / 'DELETE'i / 'DROP'i / 'INSERT'i / 'SELECT'i / 'SET'i / 'SHOW'i / 'TRUNCATE'i / 'UPDATE'i / 'START'i / 'COMMIT'i / 'ROLLBACK'i

IdentifierOrKeyword &lt;- Keyword / QtIdentifier / Identifier

Number          &lt;- &lt;[+-]? [0-9]+ ('.' [0-9]+)?&gt;

StringLiteral   &lt;- "'" ( "''" / !"'" . )* "'"

Punctuation     &lt;- [~!@#$%^&amp;*=+:&lt;&gt;\\/,.?|-]

EOL &lt;- '\n' / '\r\n' / '\r'  # End of Line
EOI &lt;- !.                    # End of Input
EOS &lt;- ';'                   # End of Statement
</code></pre></div></div> <blockquote> <p><strong><em>NOTE:</em></strong> I added rule MLC2 to treat any text inside $$ tags as a multiline comment.</p> </blockquote> <p>Sample text and AST:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE FUNCTION voidtest1(a int) RETURNS VOID LANGUAGE SQL AS
$$ SELECT a + 1 $$;
SELECT voidtest1(42);

+ Statements
    + Statement
    - Expression/3[Keyword] (CREATE)
    - Expression/3[Identifier] (FUNCTION)
    - Expression/3[Identifier] (voidtest1)
    + Expression/0[Statement]
        - Expression/3[Identifier] (a)
        - Expression/3[Identifier] (int)
    - Expression/3[Identifier] (RETURNS)
    - Expression/3[Identifier] (VOID)
    - Expression/3[Identifier] (LANGUAGE)
    - Expression/3[Identifier] (SQL)
    - Expression/3[Identifier] (AS)
    + Statement
    - Expression/3[Keyword] (SELECT)
    - Expression/3[Identifier] (voidtest1)
    - Expression/0[Number] (42)
    + Statement
</code></pre></div></div> <table><tbody><tr> <td style="display: block;"><img src="/assets/img/redher_sm.jpg" alt="red herring"/></td><td><sub>At this point, I became curious whether it is possible to handle dynamic tags similar to C++ multiline literals: <br/> ``R"xyz( ... )xyz"`` or similar to Postgres function body wrappers:</sub><br/> <pre style="line-height: 0.8em;margin: 0;font-size: 0.7em;"><code class="language-sql">
create function square(x int4) returns int4 as<br />
$xyz$<br />
begin<br />
    return x * x;<br />
end<br />
$xyz$ language plpgsql;<br />
</code></pre><sub> Gemini suggested this variant:<br/> </sub><pre style="line-height: 0.8em;margin: 0;font-size: 0.7em;"><code>
DollarQuotedString &lt;- StartTag Content EndTag<br />
StartTag &lt;- '$' Tag? '$'<br />
EndTag &lt;- '$' Tag? '$' &amp;{ match(Tag, StartTag.Tag) }<br />
Tag &lt;- &lt; [a-zA-Z_0-9]* &gt;<br />
Content &lt;- (!EndTag .)*<br />
</code></pre><sub> <br/> But then it added the comment "cpp-peglib does not support semantic predicates in the way I demonstrated with the ``&amp;{...}`` syntax. That syntax is a powerful but non-standard extension to PEGs that allows for dynamic checks. Many online PEG tools, including cpp-peglib, stick to the core PEG operators."<br/> As next logical step, I asked this question on yhirose github page, and immediately got answer from mingodad that cpp-peglib provides mechanism called Capture/Backtrace. He also provided the example:<br/> <br/> </sub><pre style="line-height: 0.8em;margin: 0;font-size: 0.7em;"><code>
CreateFunc &lt;- Header Body Language ';'<br />
Header &lt;- 'CREATE'i 'FUNCTION'i (!'RETURNS'i .)+ 'RETURNS'i (!'AS'i .)+ 'AS'i<br />
Body &lt;- DollarQuotedString<br />
Language &lt;- 'LANGUAGE'i (!';' .)+<br />
DollarQuotedString &lt;- $(StartTag Content EndTag)<br />
StartTag &lt;- &lt;'$' $Tag&lt;Separator&gt; '$'&gt;<br />
EndTag &lt;- &lt;'$' $Tag '$'&gt;<br />
Separator &lt;- (!'$' .)*<br />
Content &lt;- $((!EndTag .)*)<br />
<br />
%whitespace &lt;- [ \t\r\n]*<br />
</code></pre><br/><sub> With the resulting AST: </sub><pre style="line-height: 0.8em;margin: 0;font-size: 0.7em;"><code>
+ CreateFunc<br />
    - Header (create function square(x int4) returns int4 as)<br />
    + Body/0[DollarQuotedString]<br />
    - StartTag ($xyz$)<br />
    - Content (begin<br />
    return x * x;<br />
end<br />
)<br />
    - EndTag ($xyz$)<br />
    - Language (language plpgsql)<br />
</code></pre> </td> </tr></tbody></table> <p><br/></p> <p>Third, Gemini suggested: “In C++, the best way to process an Abstract Syntax Tree (AST) is by using the Visitor pattern and recursive traversal. This approach combines a well-established design pattern with a fundamental algorithm to handle the tree’s hierarchical structure effectively.” It defined the Visitor interface as:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">IParseTreeVisitor</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">IParseTreeVisitor</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">originalStmt</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">pContext</span><span class="p">)</span>
                    <span class="o">:</span> <span class="n">_originalStmt</span><span class="p">(</span><span class="n">originalStmt</span><span class="p">),</span> <span class="n">_pContext</span><span class="p">(</span><span class="n">pContext</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Visit</span><span class="p">(</span><span class="k">const</span> <span class="n">CustomAst</span><span class="o">&amp;</span> <span class="n">ast</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">protected</span><span class="o">:</span>
    <span class="kt">void</span><span class="o">*</span> <span class="n">_pContext</span><span class="p">;</span> <span class="c1">// reserved</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_originalStmt</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div> <p>Where CustomAst was defined as:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CustomType</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">Accept</span><span class="p">(</span><span class="n">IParseTreeVisitor</span><span class="o">*</span> <span class="n">pVisitor</span><span class="p">);</span>
<span class="p">};</span>

<span class="k">using</span> <span class="n">CustomAst</span> <span class="o">=</span> <span class="n">peg</span><span class="o">::</span><span class="n">AstBase</span><span class="o">&lt;</span><span class="n">CustomType</span><span class="o">&gt;</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">CustomType</span><span class="o">::</span><span class="n">Accept</span><span class="p">(</span><span class="n">IParseTreeVisitor</span><span class="o">*</span> <span class="n">pVisitor</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">pVisitor</span><span class="o">-&gt;</span><span class="n">Visit</span><span class="p">(</span><span class="o">*</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">CustomAst</span><span class="o">*&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div> <table><tbody><tr> <td style="display: block;"><img src="/assets/img/redher_sm.jpg" alt="red herring"/></td><td><sub>I thought that I might need a method to obtain a substring that created the given AST node, so I wrote the following method and placed it inside IParseTreeVisitor for code reuse in derived classes:</sub><br/> <pre style="line-height: 0.8em;margin: 0;font-size: 0.7em;"><code class="language-cpp">
 std::string getLRTerm(const CustomAst&amp; ast) {<br />
     &nbsp;&nbsp;if (ast.is_token)<br />
         &nbsp;&nbsp;&nbsp;&nbsp;return std::string(ast.token);<br />
 <br />
     &nbsp;&nbsp;if (0 == ast.length)<br />
         &nbsp;&nbsp;&nbsp;&nbsp;return "";<br />
 <br />
     &nbsp;&nbsp;auto pos = ast.position;<br />
     &nbsp;&nbsp;auto len = ast.length;<br />
 <br />
     &nbsp;&nbsp;if (ast.tag != ast.original_tag)<br />
     &nbsp;&nbsp;{<br />
         &nbsp;&nbsp;&nbsp;&nbsp;pos = ast.nodes[0]-&gt;position;<br />
         &nbsp;&nbsp;&nbsp;&nbsp;len = ast.nodes[ast.nodes.size() - 1]-&gt;position + ast.nodes[ast.nodes.size() - 1]-&gt;length - pos;<br />
     &nbsp;&nbsp;}<br />
 <br />
     &nbsp;&nbsp;return m_originalStmt.substr(pos, len);<br />
 }
 </code></pre><sub>The <code class="language-plaintext highlighter-rouge">ast.nodes[0]</code> is left child node (L) and the <code class="language-plaintext highlighter-rouge">ast.nodes[ast.nodes.size() - 1]</code> is right child node (R). Later I realized that this method worked for a single line input only. I fixed it for a multiline text, but soon realized that I did not need it.</sub> </td> </tr></tbody></table> <p><br/></p> <p>The final cherry on top idea comes from observation of AST:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- sample comment</span>
<span class="k">SELECT</span> <span class="k">max</span><span class="p">(</span><span class="nv">"col1"</span><span class="p">)</span> <span class="k">FROM</span> <span class="nv">"tbl"</span> <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span><span class="k">SELECT</span> <span class="mi">1</span><span class="p">;</span>

<span class="o">+</span> <span class="n">Statements</span>
    <span class="o">+</span> <span class="k">Statement</span>
    <span class="o">-</span> <span class="n">Expression</span><span class="o">/</span><span class="mi">3</span><span class="p">[</span><span class="n">Keyword</span><span class="p">]</span> <span class="p">(</span><span class="k">SELECT</span><span class="p">)</span>
    <span class="o">-</span> <span class="n">Expression</span><span class="o">/</span><span class="mi">3</span><span class="p">[</span><span class="n">Identifier</span><span class="p">]</span> <span class="p">(</span><span class="k">max</span><span class="p">)</span>
    <span class="o">-</span> <span class="n">Expression</span><span class="o">/</span><span class="mi">0</span><span class="p">[</span><span class="n">QtIdentifier</span><span class="p">]</span> <span class="p">(</span><span class="nv">"col1"</span><span class="p">)</span>
    <span class="o">-</span> <span class="n">Expression</span><span class="o">/</span><span class="mi">3</span><span class="p">[</span><span class="n">Identifier</span><span class="p">]</span> <span class="p">(</span><span class="k">FROM</span><span class="p">)</span>
    <span class="o">-</span> <span class="n">Expression</span><span class="o">/</span><span class="mi">3</span><span class="p">[</span><span class="n">QtIdentifier</span><span class="p">]</span> <span class="p">(</span><span class="nv">"tbl"</span><span class="p">)</span>
    <span class="o">-</span> <span class="n">Expression</span><span class="o">/</span><span class="mi">3</span><span class="p">[</span><span class="n">Identifier</span><span class="p">]</span> <span class="p">(</span><span class="k">LIMIT</span><span class="p">)</span>
    <span class="o">-</span> <span class="n">Expression</span><span class="o">/</span><span class="mi">2</span><span class="p">[</span><span class="n">Number</span><span class="p">]</span> <span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="o">-</span> <span class="n">EOS</span> <span class="p">(;)</span>
    <span class="o">+</span> <span class="k">Statement</span>
    <span class="o">-</span> <span class="n">Expression</span><span class="o">/</span><span class="mi">3</span><span class="p">[</span><span class="n">Keyword</span><span class="p">]</span> <span class="p">(</span><span class="k">SELECT</span><span class="p">)</span>
    <span class="o">-</span> <span class="n">Expression</span><span class="o">/</span><span class="mi">2</span><span class="p">[</span><span class="n">Number</span><span class="p">]</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="o">-</span> <span class="n">EOS</span> <span class="p">(;)</span>
    <span class="o">+</span> <span class="k">Statement</span>
    <span class="o">-</span> <span class="n">EOI</span> <span class="p">()</span>
</code></pre></div></div> <p>Spaces, comments, parenthesis are not included in AST. So, there should be a mechanism to insert missing characters from the original input string. I implemented it by counting how many characters were printed, and if next AST node start position is larger than the counter, print the omitted characters from the original string. Here is first version of visitor that prints a string that is the same as the input:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CParseTreeVisitor</span> <span class="o">:</span> <span class="k">public</span> <span class="n">IParseTreeVisitor</span> <span class="p">{</span>
    <span class="kt">size_t</span> <span class="n">_printedCount</span><span class="p">;</span>

<span class="nl">public:</span>
    <span class="n">CParseTreeVisitor</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">originalStmt</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">pContext</span><span class="p">)</span>
                <span class="o">:</span> <span class="n">IParseTreeVisitor</span><span class="p">(</span><span class="n">originalStmt</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">pContext</span><span class="p">),</span> <span class="n">_printedCount</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">Visit</span><span class="p">(</span><span class="k">const</span> <span class="n">CustomAst</span><span class="o">&amp;</span> <span class="n">ast</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="n">tag</span><span class="p">)</span> <span class="p">{</span>
        <span class="nl">default:</span>
            <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">node</span> <span class="o">:</span> <span class="n">ast</span><span class="p">.</span><span class="n">nodes</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">column</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">_printedCount</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_originalStmt</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">_printedCount</span><span class="p">,</span> 
                                    <span class="n">node</span><span class="o">-&gt;</span><span class="n">column</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">_printedCount</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">term</span><span class="p">(</span><span class="n">getLRTerm</span><span class="p">(</span><span class="o">*</span><span class="n">node</span><span class="p">));</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">term</span><span class="p">;</span>

                <span class="n">_printedCount</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">column</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">term</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>

        <span class="k">case</span> <span class="n">peg</span><span class="o">::</span><span class="n">str2tag</span><span class="p">(</span><span class="s">"QtIdentifier"</span><span class="p">):</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ast</span><span class="p">.</span><span class="n">token</span><span class="p">;</span>
            <span class="n">_printedCount</span> <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="n">column</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">ast</span><span class="p">.</span><span class="n">token</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <p>After the initial success in printing AST, I made two improvements: first, the printer code should be aware about line and column (not only a column); and second, it should walk thru the tree (not only print first level nodes). For this I modified IParseTreeIntrface with Gemini help as:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">IParseTreeVisitor</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">IParseTreeVisitor</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">originalStmt</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">pContext</span><span class="p">)</span> 
                <span class="o">:</span> <span class="n">_originalStmt</span><span class="p">(</span><span class="n">originalStmt</span><span class="p">),</span> <span class="n">_pContext</span><span class="p">(</span><span class="n">pContext</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">getOffsetsLengths</span><span class="p">(</span><span class="n">_originalStmt</span><span class="p">,</span> <span class="n">_lineOfsLens</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Visit</span><span class="p">(</span><span class="k">const</span> <span class="n">CustomAst</span><span class="o">&amp;</span> <span class="n">ast</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">protected</span><span class="o">:</span>
    <span class="k">static</span> <span class="kt">void</span> <span class="nf">getOffsetsLengths</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">text</span>
                                                <span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="p">,</span> <span class="kt">size_t</span><span class="o">&gt;&gt;&amp;</span> <span class="n">line_data</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">size_t</span> <span class="n">current_pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">start_of_line</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">while</span> <span class="p">((</span><span class="n">current_pos</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="sc">'\n'</span><span class="p">,</span> <span class="n">start_of_line</span><span class="p">))</span> <span class="o">!=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">npos</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">line_data</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span> <span class="n">start_of_line</span><span class="p">,</span> <span class="n">current_pos</span> <span class="o">-</span> <span class="n">start_of_line</span> <span class="p">});</span>
            <span class="n">start_of_line</span> <span class="o">=</span> <span class="n">current_pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kt">size_t</span> <span class="n">last_line_length</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_of_line</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">last_line_length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">start_of_line</span> <span class="o">&lt;</span> <span class="n">text</span><span class="p">.</span><span class="n">length</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">line_data</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span> <span class="n">start_of_line</span><span class="p">,</span> <span class="n">last_line_length</span> <span class="p">});</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span><span class="o">*</span> <span class="n">_pContext</span><span class="p">;</span> <span class="c1">// reserved</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_originalStmt</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="p">,</span> <span class="kt">size_t</span><span class="o">&gt;&gt;</span> <span class="n">_lineOfsLens</span><span class="p">;</span>   <span class="c1">// pairs of offsets and lengths</span>
<span class="p">};</span>
</code></pre></div></div> <p>And slightly modified the <code class="language-plaintext highlighter-rouge">Visit</code> method itself:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="p">,</span> <span class="kt">size_t</span><span class="o">&gt;</span> <span class="n">_printedCount</span><span class="p">;</span><span class="c1">// index of last printed line, and total chars already printed</span>

<span class="kt">void</span> <span class="nf">Visit</span><span class="p">(</span><span class="k">const</span> <span class="n">CustomAst</span><span class="o">&amp;</span> <span class="n">ast</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">node</span> <span class="o">:</span> <span class="n">ast</span><span class="p">.</span><span class="n">nodes</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// print chars from the last printed position to the node</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">_printedCount</span><span class="p">.</span><span class="n">first</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">const</span> <span class="kt">size_t</span> <span class="n">currentOffset</span> <span class="o">=</span> <span class="n">_lineOfsLens</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">;</span>
            <span class="k">const</span> <span class="kt">size_t</span> <span class="n">currentLen</span> <span class="o">=</span> <span class="n">_lineOfsLens</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_printedCount</span><span class="p">.</span><span class="n">second</span> <span class="o">&lt;</span> <span class="n">currentOffset</span> <span class="o">+</span> <span class="n">currentLen</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">_originalStmt</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">_printedCount</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="n">currentOffset</span> <span class="o">+</span> <span class="n">currentLen</span> <span class="o">-</span> <span class="n">_printedCount</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">_printedCount</span> <span class="o">=</span> <span class="p">{</span> <span class="n">i</span><span class="p">,</span> <span class="n">currentOffset</span> <span class="o">+</span> <span class="n">currentLen</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// print either token or visit the node</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">is_token</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">const</span> <span class="kt">size_t</span> <span class="n">currentOffset</span> <span class="o">=</span> <span class="n">_lineOfsLens</span><span class="p">[</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">first</span> <span class="o">+</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">const</span> <span class="kt">size_t</span> <span class="n">currentLen</span> <span class="o">=</span> <span class="n">_lineOfsLens</span><span class="p">[</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_printedCount</span><span class="p">.</span><span class="n">second</span> <span class="o">&lt;</span> <span class="n">currentOffset</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">_originalStmt</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">_printedCount</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="n">currentOffset</span> <span class="o">-</span> <span class="n">_printedCount</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
                <span class="n">_printedCount</span><span class="p">.</span><span class="n">second</span> <span class="o">=</span> <span class="n">currentOffset</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">token</span><span class="p">;</span>

            <span class="n">_printedCount</span><span class="p">.</span><span class="n">second</span> <span class="o">+=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">token</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">node</span><span class="o">-&gt;</span><span class="n">Accept</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Easy peasy!</p> <h3 id="t-sql-peg-parser">T-SQL PEG Parser</h3> <p>Since the Postgres grammar was basically skipping most symbols, I made the following changes to support T-SQL syntax:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>• Changed QtIdentifier rule as:  
    QtIdentifier      &lt;- '[' [^\]]* ']' / '"' [^"]* '"'
• Changed EOS rule as:
    EOS &lt;- ';' / 'GO'i           # End of Statement
• Added the TOP rule:
    TopClause &lt;- 'TOP'i Spacing Number { no_ast_opt }
</code></pre></div></div> <h2 id="part-2-internal-representation-ir">Part 2. Internal Representation (IR)</h2> <p>The internal representation should keep information about a SQL statement in dialect-neutral form. It can be used to output SQL into any desired dialect. The IR could be implemented as a tree-like structure, but for the purpose of this small exercise I used a simple structure with the following fields:</p> <table> <thead> <tr> <th>Field</th> <th>Purpose</th> </tr> </thead> <tbody> <tr> <td>STMT_TYPE _stt</td> <td>Statement type defined as: <code class="language-plaintext highlighter-rouge">enum STMT_TYPE { STT_UNKNOWN, STT_ALTER, STT_CREATE, STT_DELETE, STT_DROP, STT_INSERT, STT_SELECT, STT_SET, STT_SHOW, STT_TRUNCATE, STT_UPDATE, STT_START, STT_COMMIT, STT_ROLLBACK };</code></td> </tr> <tr> <td>string _text</td> <td>The SQL Statement without <code class="language-plaintext highlighter-rouge">LIMIT/TOP</code> clause</td> </tr> <tr> <td>string _alt_text</td> <td>The <code class="language-plaintext highlighter-rouge">LIMIT/TOP</code> clause</td> </tr> <tr> <td>size_t _alt_pos</td> <td>Position in _text where to insert _alt_text</td> </tr> </tbody> </table> <p><br/></p> <p>To populate IR I needed helper functions that transform AST nodes into “build IR” instructions. So I defined a function as:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// returns true if transform succeeded</span>
    <span class="kt">bool</span> <span class="nf">transform</span><span class="p">(</span><span class="k">const</span> <span class="n">CustomAst</span><span class="o">&amp;</span> <span class="n">ast</span><span class="p">,</span> <span class="n">OutputInstruction</span><span class="o">&amp;</span> <span class="n">instruction</span><span class="p">);</span>
</code></pre></div></div> <p>Where OutputInstruction was defined as:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="n">OUTPUT_TYPE</span> <span class="p">{</span>
    <span class="n">INPLACE</span><span class="p">,</span>    <span class="c1">// replace token inplace</span>
    <span class="n">APPEND</span><span class="p">,</span>     <span class="c1">// remove existing token(s) and append new one at the end</span>
    <span class="n">INJECT_0</span><span class="p">,</span>   <span class="c1">// inject into position #0</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="nc">OutputInstruction</span> <span class="p">{</span>
    <span class="n">OUTPUT_TYPE</span> <span class="n">type</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div> <p>I also needed a predicate that defines to which AST node the specified function will be applied:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">TransformPredicate</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="n">tag</span><span class="p">;</span>       <span class="c1">// e.g. peg::str2tag("QtIdentifier")</span>
    <span class="kt">bool</span> <span class="p">(</span><span class="o">*</span><span class="n">transform</span><span class="p">)(</span><span class="k">const</span> <span class="n">CustomAst</span><span class="o">&amp;</span> <span class="n">ast</span><span class="p">,</span> <span class="n">OutputInstruction</span><span class="o">&amp;</span> <span class="n">instruction</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div> <p>The actual transformers for quoted identifiers and LIMIT/TOP clauses were defined as:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TransformPredicate</span> <span class="n">pgsql_transformers</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span> <span class="n">peg</span><span class="o">::</span><span class="n">str2tag</span><span class="p">(</span><span class="s">"QtIdentifier"</span><span class="p">),</span> <span class="p">[](</span><span class="k">const</span> <span class="n">CustomAst</span><span class="o">&amp;</span> <span class="n">ast</span><span class="p">,</span> <span class="n">OutputInstruction</span><span class="o">&amp;</span> <span class="n">instruction</span><span class="p">)</span> <span class="p">{</span> <span class="n">instruction</span> <span class="o">=</span> <span class="p">{</span> <span class="n">INPLACE</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">"["</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="n">token</span><span class="p">).</span><span class="n">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">ast</span><span class="p">.</span><span class="n">token</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="s">"]"</span> <span class="p">};</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span> <span class="p">}},</span>
    <span class="p">{</span> <span class="n">peg</span><span class="o">::</span><span class="n">str2tag</span><span class="p">(</span><span class="s">"LimitClause"</span><span class="p">),</span> <span class="p">[](</span><span class="k">const</span> <span class="n">CustomAst</span><span class="o">&amp;</span> <span class="n">ast</span><span class="p">,</span> <span class="n">OutputInstruction</span><span class="o">&amp;</span> <span class="n">instruction</span><span class="p">)</span> <span class="p">{</span> <span class="n">instruction</span> <span class="o">=</span> <span class="p">{</span> <span class="n">INJECT_0</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">"TOP "</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="n">nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">token</span><span class="p">)</span> <span class="o">+</span> <span class="s">" "</span> <span class="p">};</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span> <span class="p">}},</span>
    <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">nullptr</span> <span class="p">}</span>
<span class="p">};</span>

<span class="n">TransformPredicate</span> <span class="n">tsql_transformers</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span> <span class="n">peg</span><span class="o">::</span><span class="n">str2tag</span><span class="p">(</span><span class="s">"QtIdentifier"</span><span class="p">),</span> <span class="p">[](</span><span class="k">const</span> <span class="n">CustomAst</span><span class="o">&amp;</span> <span class="n">ast</span><span class="p">,</span> <span class="n">OutputInstruction</span><span class="o">&amp;</span> <span class="n">instruction</span><span class="p">)</span> <span class="p">{</span> <span class="n">instruction</span> <span class="o">=</span> <span class="p">{</span> <span class="n">INPLACE</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">"</span><span class="se">\"</span><span class="s">"</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="n">token</span><span class="p">).</span><span class="n">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">ast</span><span class="p">.</span><span class="n">token</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="s">"</span><span class="se">\"</span><span class="s">"</span> <span class="p">};</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span> <span class="p">}},</span>
    <span class="p">{</span> <span class="n">peg</span><span class="o">::</span><span class="n">str2tag</span><span class="p">(</span><span class="s">"TopClause"</span><span class="p">),</span> <span class="p">[](</span><span class="k">const</span> <span class="n">CustomAst</span><span class="o">&amp;</span> <span class="n">ast</span><span class="p">,</span> <span class="n">OutputInstruction</span><span class="o">&amp;</span> <span class="n">instruction</span><span class="p">)</span> <span class="p">{</span> <span class="n">instruction</span> <span class="o">=</span> <span class="p">{</span> <span class="n">APPEND</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">" LIMIT "</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="n">nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">token</span><span class="p">)</span> <span class="p">};</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span> <span class="p">}},</span>
    <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">nullptr</span> <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <p>Very straightforward so far (as expected from a POC). I only needed to apply the instruction to the IR, so I added the following method to StatementIRep class:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">ProcessInstruction</span><span class="p">(</span><span class="k">const</span> <span class="n">OutputInstruction</span><span class="o">&amp;</span> <span class="n">instruction</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">instruction</span><span class="p">.</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">INPLACE</span><span class="p">:</span> <span class="n">_text</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">instruction</span><span class="p">.</span><span class="n">text</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">APPEND</span><span class="p">:</span> <span class="n">_alt_text</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">instruction</span><span class="p">.</span><span class="n">text</span><span class="p">);</span> <span class="n">_alt_pos</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">npos</span><span class="p">;</span>  <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">INJECT_0</span><span class="p">:</span> <span class="n">_alt_text</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">instruction</span><span class="p">.</span><span class="n">text</span><span class="p">);</span> <span class="n">_alt_pos</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>  <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>The final piece was to include calls to the transformers into the <code class="language-plaintext highlighter-rouge">Visitor</code>.</p> <h2 id="part-3-implementing-output-generator-and-testing">Part 3. Implementing output generator and testing</h2> <p>General solution would be to iterate thru all transformers to generate output. But for POC purposes I modified <code class="language-plaintext highlighter-rouge">CParseTreeVisitor::Visit()</code> to invoke <code class="language-plaintext highlighter-rouge">transformer[0]</code> for tokens (aka terminals) and to invoke <code class="language-plaintext highlighter-rouge">transformer[1]</code> for non-terminals:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">OutputInstruction</span> <span class="n">instruction</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">is_token</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">output</span> <span class="o">=</span> <span class="n">_statements</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">_text</span><span class="p">;</span>
    <span class="c1">//...</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">tag</span> <span class="o">==</span> <span class="n">transformers</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">tag</span> <span class="o">&amp;&amp;</span> <span class="n">transformers</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">transform</span><span class="p">(</span><span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="n">instruction</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">_statements</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">ProcessInstruction</span><span class="p">(</span><span class="n">instruction</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">output</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">token</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">//...</span>
<span class="p">}</span>
<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">tag</span> <span class="o">==</span> <span class="n">transformers</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">tag</span> <span class="o">&amp;&amp;</span> <span class="n">transformers</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">transform</span><span class="p">(</span><span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="n">instruction</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">_statements</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">ProcessInstruction</span><span class="p">(</span><span class="n">instruction</span><span class="p">);</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div></div> <p>To generate output I implemented <code class="language-plaintext highlighter-rouge">GetStatementsText()</code> in the Visitor as:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetStatementsText</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="n">stmt</span> <span class="o">:</span> <span class="n">_statements</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span><span class="p">(</span><span class="n">stmt</span><span class="p">.</span><span class="n">_text</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">stmt</span><span class="p">.</span><span class="n">_alt_text</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
            <span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">stmt</span><span class="p">.</span><span class="n">_alt_pos</span> <span class="o">!=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">npos</span> <span class="o">?</span> <span class="n">stmt</span><span class="p">.</span><span class="n">_alt_pos</span> <span class="o">:</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">stmt</span><span class="p">.</span><span class="n">_alt_text</span><span class="p">);</span>
        <span class="n">text</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
        <span class="p">}</span>    
        <span class="k">return</span> <span class="n">text</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Then I wrote the <code class="language-plaintext highlighter-rouge">Transpile()</code> helper function for the testing. It calls parser on the input, synthesizes the output using the <code class="language-plaintext highlighter-rouge">Visitor</code>, and compares the output with the expected text:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">Transpile</span><span class="p">(</span><span class="n">peg</span><span class="o">::</span><span class="n">parser</span><span class="o">&amp;</span> <span class="n">parser</span><span class="p">,</span> <span class="n">TransformPredicate</span><span class="o">*</span> <span class="n">transformers</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">szInput</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">szExpected</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">CustomAst</span><span class="o">&gt;</span> <span class="n">ast</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">parser</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="n">szInput</span><span class="p">,</span> <span class="n">ast</span><span class="p">))</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>

    <span class="n">ast</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">optimize_ast</span><span class="p">(</span><span class="n">ast</span><span class="p">);</span>

    <span class="c1">// fmt::print("AST (optimized): {}\n{}\n", szInput, peg::ast_to_s(ast));</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">ast</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">CContext</span> <span class="n">context</span><span class="p">(</span><span class="n">transformers</span><span class="p">);</span>
        <span class="n">CParseTreeVisitor</span> <span class="n">visitor</span><span class="p">(</span><span class="n">szInput</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">context</span><span class="p">);</span>
        <span class="n">visitor</span><span class="p">.</span><span class="n">Visit</span><span class="p">(</span><span class="o">*</span><span class="n">ast</span><span class="p">);</span>

        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Statements parsed: "</span> <span class="o">&lt;&lt;</span> <span class="n">visitor</span><span class="p">.</span><span class="n">GetStatements</span><span class="p">().</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">actual</span><span class="p">(</span><span class="n">visitor</span><span class="p">.</span><span class="n">GetStatementsText</span><span class="p">());</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">expected</span><span class="p">(</span><span class="n">szExpected</span><span class="p">);</span>

        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">equal</span><span class="p">(</span><span class="n">actual</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">actual</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">expected</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">expected</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
            <span class="p">[](</span><span class="kt">char</span> <span class="n">a</span><span class="p">,</span> <span class="kt">char</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">tolower</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">))</span> <span class="o">==</span> <span class="n">std</span><span class="o">::</span><span class="n">tolower</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">b</span><span class="p">));</span>
            <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>And then I added tests like these:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEST</span><span class="p">(</span><span class="n">TestCase1</span><span class="p">,</span> <span class="n">TestName4</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">EXPECT_TRUE</span><span class="p">(</span><span class="n">Transpile</span><span class="p">(</span><span class="n">pgsql_parser</span><span class="p">(),</span> <span class="n">pgsql_transformers</span><span class="p">,</span> <span class="s">"Select max(</span><span class="se">\"</span><span class="s">col1</span><span class="se">\"</span><span class="s">) FROM </span><span class="se">\"</span><span class="s">tbl</span><span class="se">\"</span><span class="s"> LIMIT 10;"</span><span class="p">,</span> <span class="s">"Select TOP 10 max([col1]) FROM [tbl];"</span><span class="p">));</span>
<span class="p">}</span>

<span class="n">TEST</span><span class="p">(</span><span class="n">TestCase1</span><span class="p">,</span> <span class="n">TestName5</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">EXPECT_TRUE</span><span class="p">(</span><span class="n">Transpile</span><span class="p">(</span><span class="n">tsql_parser</span><span class="p">(),</span> <span class="n">tsql_transformers</span><span class="p">,</span> <span class="s">"Select TOP 10 max([dbo].[col1]) FROM [dbo].[tbl];"</span><span class="p">,</span> <span class="s">"Select max(</span><span class="se">\"</span><span class="s">dbo</span><span class="se">\"</span><span class="s">.</span><span class="se">\"</span><span class="s">col1</span><span class="se">\"</span><span class="s">) FROM </span><span class="se">\"</span><span class="s">dbo</span><span class="se">\"</span><span class="s">.</span><span class="se">\"</span><span class="s">tbl</span><span class="se">\"</span><span class="s"> LIMIT 10;"</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="conclusion">Conclusion</h2> <p>I described my journey with Gemini on creating a SQL transpiler. Gemini was making numerous assumptions about my intentions and generated something entirely different from what I wanted. But I definitely improved my skills of telling Gemini what I wanted by asking it to do very primitive assignments. In a few cases, the AI saved me a bit of time, e.g., “write procedure to split text in vector of lines” or “write procedure to iterate all files in specified path and read the files as text.” The AI helped teach me about the PEG parser, the Visitor pattern, etc. However, the “vibe coding” is the same as the spherical cow in a vacuum.<br/> The idea behind the SQL Transpiler was to start with a very basic parser that extracts identifiers, numbers, and string literals, and then add various rules, such as LIMIT/TOP. This idea could be fruitful, and I would appreciate your feedback (my contact is phoenicyan at gmail dot com). I want to learn alternative ideas for a transpiler, especially from people who have had previous experience in the creation of transpilers.</p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1"> <p>Definition: “Vibe coding” is a term for a style of software development that heavily relies on artificial intelligence (AI) to generate code. Instead of writing code line-by-line, the developer describes their goal in natural language, and an AI assistant produces the code. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="poasts"/><category term="AI"/><category term="vibe-coded"/><category term="SQL"/><summary type="html"><![CDATA[we use highly regarded tools to write a SQL statement transpiler]]></summary></entry><entry><title type="html">a post with plotly.js</title><link href="https://phoenicyan.github.io/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://phoenicyan.github.io/blog/2025/plotly</id><content type="html" xml:base="https://phoenicyan.github.io/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://phoenicyan.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://phoenicyan.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://phoenicyan.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://phoenicyan.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://phoenicyan.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://phoenicyan.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://phoenicyan.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://phoenicyan.github.io/blog/2024/tabs</id><content type="html" xml:base="https://phoenicyan.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="3df0ce44-fb90-4744-a13b-c1e9e3e6ba01" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="3df0ce44-fb90-4744-a13b-c1e9e3e6ba01" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="7916fe81-eb2c-492b-98f0-f3f1a1fe682f" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="7916fe81-eb2c-492b-98f0-f3f1a1fe682f" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="6dde3368-9e0e-4bb7-b5da-49fc6bae1489" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="6dde3368-9e0e-4bb7-b5da-49fc6bae1489" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://phoenicyan.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://phoenicyan.github.io/blog/2024/typograms</id><content type="html" xml:base="https://phoenicyan.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://phoenicyan.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://phoenicyan.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://phoenicyan.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://phoenicyan.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://phoenicyan.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://phoenicyan.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://phoenicyan.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://phoenicyan.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://phoenicyan.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://phoenicyan.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://phoenicyan.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://phoenicyan.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry></feed>